# -*- coding: utf-8 -*-
"""fitting and clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qVjhQgNGZQk7QjD6kDfcyo10RDSOh-dh
"""

# import necessary libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

def file_convt(filename: str):

  # Read the file into a pandas dataframe
  dataframe = pd.read_csv(filename)
    
  # Transpose the dataframe
  df_transposed = dataframe.transpose()
    
  # Populate the header of the transposed dataframe with the header information 
   
  # silice the dataframe to get the year as columns
  df_transposed.columns = df_transposed.iloc[1]

  # As year is now columns so we don't need it as rows
  df_transposed_year = df_transposed[0:].drop('year')
    
  # silice the dataframe to get the country as columns
  df_transposed.columns = df_transposed.iloc[0]
    
  # As country is now columns so we don't need it as rows
  df_transposed_country = df_transposed[0:].drop('country')
    
  return dataframe, df_transposed_country, df_transposed_year

# removes null values from a given feature

def remove_null_values(feature):
  # drop null values from the feature
  return np.array(feature.dropna())

# load data from World Bank website or a similar source
df, df_country, df_year = file_convt('wbdataset.csv')

def clean_df(df):

  # Making dataframe of all the feature in the avaiable in 
  # dataframe passing it to remove null values function 
  # for dropping the null values 

  fresh_water = remove_null_values(df[['fresh_water']])

  GDP = remove_null_values(df[['GDP']])

  urban_population = remove_null_values(df[['urban_population']])

  min_length = min(len(fresh_water), len(GDP), len(urban_population))
 
   # after removing the null values we will create datafram 

  clean_data = pd.DataFrame({ 
                                'country': [df['country'].iloc[x] for x in range(min_length)],
                                'year': [df['year'].iloc[x] for x in range(min_length)],
                                'fresh_water': [fresh_water[x][0] for x in range(min_length)],
                                'GDP': [GDP[x][0] for x in range(min_length)],
                                 'urban_population': [urban_population[x][0] for x in range(min_length)]
                                 })
  return clean_data

# Clean and preprocess the data
df = clean_df(df)

# Normalize the data using MinMaxScaler
scaler = MinMaxScaler()
transform_data = scaler.fit_transform(df[['fresh_water', 'GDP', 'urban_population']])

# Use KMeans to find clusters in the data
kmeans = KMeans(n_clusters=4)
kmeans.fit(transform_data)

# Add the cluster assignments as a new column to the dataframe
df['cluster'] = kmeans.labels_

cluster_data = [df[df['cluster'] == i] for i in range(4)]
centers = kmeans.cluster_centers_

fig, ax = plt.subplots()
for i, data in enumerate(cluster_data):
    ax.scatter(data['GDP'], data['fresh_water'], label=f'Cluster {i}')

ax.set_xlabel('GDP')
ax.set_ylabel('Fresh Water')
ax.set_title('Clusters of GDP and Fresh Water')
ax.legend()
plt.show()

cluster_data = [df[df['cluster'] == i] for i in range(4)]
centers = kmeans.cluster_centers_

fig, ax = plt.subplots()
for i, data in enumerate(cluster_data):
    ax.scatter(data['GDP'], data['urban_population'], label=f'Cluster {i}')

ax.set_xlabel('GDP')
ax.set_ylabel('Urban Population')
ax.set_title('Clusters of GDP and Urban Population')
ax.legend()
plt.show()

df.country.unique()

frn = df[df['country'] == 'France']
cluster_data = [frn[frn['cluster'] == i] for i in range(4)]
centers = kmeans.cluster_centers_

fig, ax = plt.subplots()
for i, data in enumerate(cluster_data):
    ax.scatter(data['GDP'], data['fresh_water'], label=f'Cluster {i}')

ax.set_xlabel('GDP')
ax.set_ylabel('Fresh Water')
ax.set_title('Franch Clusters of GDP and Fresh Water')
ax.legend()
plt.show()

uae = df[df['country'] == 'United Arab Emirates']
cluster_data = [uae[uae['cluster'] == i] for i in range(4)]
centers = kmeans.cluster_centers_

fig, ax = plt.subplots()
for i, data in enumerate(cluster_data):
    ax.scatter(data['GDP'], data['urban_population'], label=f'Cluster {i}')

ax.set_xlabel('GDP')
ax.set_ylabel('Urban Population')
ax.set_title('UAE Clusters of GDP and Urban Population')
ax.legend()
plt.show()

def err_ranges(x, func, param, sigma):
    """
    Calculates the upper and lower limits for the function, parameters and
    sigmas for single value or array x. Functions values are calculated for 
    all combinations of +/- sigma and the minimum and maximum is determined.
    Can be used for all number of parameters and sigmas >=1.
    
    This routine can be used in assignment programs.
    """

    import itertools as iter
    
    # initiate arrays for lower and upper limits
    lower = func(x, *param)
    upper = lower
    
    uplow = []   # list to hold upper and lower limits for parameters
    for p,s in zip(param, sigma):
        pmin = p - s
        pmax = p + s
        uplow.append((pmin, pmax))
        
    pmix = list(iter.product(*uplow))
    
    for p in pmix:
        y = func(x, *p)
        lower = np.minimum(lower, y)
        upper = np.maximum(upper, y)
        
    return lower, upper

# Define the exponential function
def exp_func(x, a, b):
    return a * np.exp(b * x)

# Data of cluster 2
data_cluster1 = df[(df['cluster'] == 2) ]

# x values and y values
x = data_cluster1['urban_population'] 
y = data_cluster1['GDP']

popt, pcov = curve_fit(exp_func, x, y)

# Use err_ranges function to estimate lower and upper limits of the confidence range
sigma = np.sqrt(np.diag(pcov))
lower, upper = err_ranges(x, exp_func, popt,sigma)

# Use pyplot to create a plot showing the best fitting function and the confidence range
plt.plot(x, y, 'o', label='data')
plt.plot(x, exp_func(x, *popt), '-', label='fit')
plt.fill_between(x, lower, upper, color='pink', label='confidence interval')
plt.legend()
plt.title('Curve Fitting')
plt.xlabel('Urban Population')
plt.ylabel('GDP')
plt.show()

# Define the range of future x-values for which you want to make predictions
future_x = np.arange(88, 95)

# Use the fitted function and the estimated parameter values to predict the future y-values
future_y = exp_func(future_x, *popt)

# Plot the predictions along with the original data
plt.plot(x, y, 'o', label='data')
plt.plot(x, exp_func(x, *popt), '-', label='fit')
plt.plot(future_x, future_y, 'o', label='future predictions')
plt.legend()
plt.title('Future predicted Values')
plt.xlabel('Urban Population')
plt.ylabel('GDP')
plt.show()